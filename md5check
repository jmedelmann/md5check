#!/usr/bin/env python3

# Copyright 2023 Jan-Marco Edelmann
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import argparse, codecs, hashlib, os, re, sys

VERSION = "1.0.0"
MD5_FILENAME = "files.md5"

previously_printed_an_error_message = False
num_errors = 0

def main():
    if sys.stdout.encoding != "utf-8":
        sys.stdout = codecs.getwriter("utf-8")(sys.stdout.buffer, "strict")
    if sys.stderr.encoding != "utf-8":
       sys.stderr = codecs.getwriter("utf-8")(sys.stderr.buffer, "strict")
    parser = argparse.ArgumentParser(description="Create and verify MD5 checksums for all files in a directory tree")
    parser.add_argument("DIRECTORY", nargs="?", default=os.getcwd())
    parser.add_argument("-g", "--generate", action="store_true", help="traverse the directory tree and generate a checksum file, " + MD5_FILENAME + ", for each directory without overwriting existing checksum files")
    parser.add_argument("-m", "--find-missing", action="store_true", help="traverse the directory tree and report for each directory if a checksum file is missing")
    parser.add_argument("--version", action="version", version="%(prog)s " + VERSION)
    args = vars(parser.parse_args())
    if os.path.isfile(args["DIRECTORY"]):
        stderr("ERROR: Not a directory: " + args["DIRECTORY"] + "\n")
        exit(1)
    elif not os.path.isdir(args["DIRECTORY"]):
        stderr("ERROR: No such directory: " + args["DIRECTORY"] + "\n")
        exit(1)
    if args["generate"]:
        generate(args["DIRECTORY"])
    elif args["find_missing"]:
        find_missing(args["DIRECTORY"])
    else:
        check(args["DIRECTORY"])

def check(target_dir):
    stdout("Checking MD5 files in directory: " + target_dir + "\n\n")
    num_checked = 0
    hash_pattern = re.compile(r"^[0-9a-f]{32}$")
    for root, dirs, files in os.walk(target_dir):
        dirs.sort(key=str.lower)
        if 0 == len(files):
            continue
        md5_filepath = os.path.join(root, MD5_FILENAME)
        if not os.path.isfile(md5_filepath):
            stderr("Missing MD5 file: " + md5_filepath + "\n\n")
            continue
        stdout("Checking MD5 file: " + md5_filepath + "\n")
        line_number = 0
        try:
            with open(md5_filepath, "r", encoding="utf-8") as md5_file:                    
                for line in [line.strip() for line in md5_file]:
                    line_number += 1
                    if line.startswith("#") or "" == line:
                        continue
                    inputs = line.split(" ", 1)
                    checksum = inputs[0].lower()
                    filename = inputs[1].strip() if 2 == len(inputs) else ""
                    if 0 == len(filename) or not hash_pattern.match(checksum):
                        stderr("ERROR: Failed to parse line " + str(line_number) + " in MD5 file: " + md5_filepath + "\n")
                        continue
                    filepath = os.path.join(root, filename)
                    if not filename in files:
                        stderr("No such file: " + filepath + "\n")
                    else:
                        try:
                            if not checksum == md5sum(filepath):
                                stderr("FAILED: " + filepath + "\n")
                            else:
                                stdout("OK: " + filename + "\n")
                        except OSError:
                            stderr("I/O ERROR: " + filepath + "\n")
                        files.remove(filename)
                    num_checked += 1
                files.remove(MD5_FILENAME)
                for filename in files:
                    stderr("New file: " + os.path.join(root, filename) + "\n")
                stdout("\n")
        except OSError:
            stderr("I/O ERROR: " + md5_filepath + "\n")
    if num_checked == 0:
        stdout("No files checked\n")
    elif num_errors == 0:
        stdout("MD5 file check completed without errors\n")
    else:
        stdout("MD5 file check completed with errors\n")
    exit(min(num_errors, 1))

def generate(target_dir):
    stdout("Generating MD5 files in directory: " + target_dir + "\n")
    for root, dirs, files in os.walk(target_dir):
        dirs.sort(key=str.lower)
        if 0 != len(files) and MD5_FILENAME not in files:
            md5_filepath = os.path.join(root, MD5_FILENAME)
            md5_file_content = ""
            for file in sorted(files, key=str.casefold):
                filepath = os.path.join(root, file)
                try:
                    md5_file_content += md5sum(filepath) + "  " + file + "\n"
                except OSError:
                    abort("I/O ERROR: " + filepath + "\n")
            try:
                with open(md5_filepath, "w", encoding="utf-8", newline="") as md5_file:
                    md5_file.write(md5_file_content)
                if not os.path.isfile(md5_filepath):
                    abort("ERROR: Failed to create file: " + md5_filepath)
                else:
                    with open(md5_filepath, "r", encoding="utf-8") as md5_file:
                        if md5_file.read() == md5_file_content:
                            stdout("Created MD5 file: " + md5_filepath + "\n")
                        else:
                            abort("ERROR: Failed to completely write file: " + md5_filepath)
            except OSError:
                abort("I/O ERROR: " + md5_filepath)
    stdout("MD5 file generation completed\n")

def find_missing(target_dir):
    stdout("Searching for missing MD5 files in directory: " + target_dir + "\n")
    for root, dirs, files in os.walk(target_dir):
        dirs.sort(key=str.lower)
        if 0 != len(files) and MD5_FILENAME not in files:
            stderr("Missing MD5 file: " + os.path.join(root, MD5_FILENAME) + "\n")
    stdout("MD5 file search completed\n")
    exit(min(num_errors, 1))

def md5sum(filename, blocksize=65536):
    hash = hashlib.md5()
    with open(filename, "rb") as file:
        for block in iter(lambda: file.read(blocksize), b""):
            hash.update(block)
    return hash.hexdigest()

def stdout(text):
    global previously_printed_an_error_message
    if previously_printed_an_error_message:
        sys.stderr.flush()
        previously_printed_an_error_message = False
    sys.stdout.write(text)

def stderr(text):
    global num_errors
    global previously_printed_an_error_message
    if not previously_printed_an_error_message:
        sys.stdout.flush()
        previously_printed_an_error_message = True
    sys.stderr.write(text)
    num_errors += 1

def abort(error_message):
    stderr(error_message + "\n")
    stdout("Aborting...\n")
    exit(1)

try:
    main()
except KeyboardInterrupt:
    pass
